{"ast":null,"code":"var _jsxFileName = \"/home/nick/minikube_dash/frontend/src/components/ClusterResources.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchResources } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusterResources = () => {\n  _s();\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getResources = async () => {\n      try {\n        const data = await fetchResources();\n        setResources(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    getResources();\n    const interval = setInterval(getResources, 5000); // Poll every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading cluster resources...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cluster-resources\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cluster Resources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resources-grid\",\n      children: resources.map(pod => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resource-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: pod.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Namespace: \", pod.namespace]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `status-${pod.status.toLowerCase()}`,\n            children: pod.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)]\n      }, `${pod.namespace}-${pod.name}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusterResources, \"xmRP2VSeXQo8FV/KF+0yWEIeN0Q=\");\n_c = ClusterResources;\nexport default ClusterResources;\nvar _c;\n$RefreshReg$(_c, \"ClusterResources\");","map":{"version":3,"names":["React","useState","useEffect","fetchResources","jsxDEV","_jsxDEV","ClusterResources","_s","resources","setResources","loading","setLoading","error","setError","getResources","data","err","message","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","pod","name","namespace","status","toLowerCase","_c","$RefreshReg$"],"sources":["/home/nick/minikube_dash/frontend/src/components/ClusterResources.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchResources } from '../services/api';\n\nconst ClusterResources = () => {\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getResources = async () => {\n      try {\n        const data = await fetchResources();\n        setResources(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    getResources();\n    const interval = setInterval(getResources, 5000); // Poll every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading) return <div>Loading cluster resources...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"cluster-resources\">\n      <h2>Cluster Resources</h2>\n      <div className=\"resources-grid\">\n        {resources.map((pod) => (\n          <div key={`${pod.namespace}-${pod.name}`} className=\"resource-card\">\n            <h3>{pod.name}</h3>\n            <p>Namespace: {pod.namespace}</p>\n            <p>Status: <span className={`status-${pod.status.toLowerCase()}`}>{pod.status}</span></p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ClusterResources;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}